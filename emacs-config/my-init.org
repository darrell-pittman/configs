#+STARTUP: overview
* Sample init.el
  Below is a sample init.el that initializes emacs and loads this my-init.org file:

  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
  '("melpa" . "https://melpa.org/packages/"))

  (package-initialize)

  (unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

  (org-babel-load-file (expand-file-name "~/.emacs.d/my-init.org"))

* Init
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/customizations/")

    ; This tls setting required if emcs version >= 26.3
    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")

  #+END_SRC
* Interface Tweaks
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (tool-bar-mode -1)
    (fset 'yes-or-no-p 'y-or-n-p)
    (global-set-key (kbd "<f5>") 'revert-buffer)

    (use-package solarized-theme
      :ensure t
      :config (load-theme 'solarized-light t))

    (global-hl-line-mode t)

    (defun wgc/get-default-font ()
      (cond
       ((eq system-type 'windows-nt) "Consolas-13")
       ((eq system-type 'gnu/linux) "DejaVu Sans Mono-15")))

    (add-to-list 'default-frame-alist `(font . ,(wgc/get-default-font)))

    (when (display-graphic-p)
      (set-face-attribute 'fixed-pitch nil :family (wgc/get-default-font)))

  #+END_SRC

* Try
  Allows trying trying packages without installing them
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)
  #+END_SRC
* Which Key
  Provides help for commands
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))

  #+END_SRC
* ibuffer
  Use ibuffer for list-buffers
  #+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer)
  #+END_SRC
* Org Bulltets
  Adds formatting to .org files
  #+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1))))
  #+END_SRC
* Ace Window
  Adds numbers for selecting windows
  #+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
	 ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      ))
  #+END_SRC
* Swiper
  Used for searches
  #+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)

  (use-package swiper
    :ensure t
    :bind(("C-s" . swiper)
	  ("C-r" . swiper)
	  ("C-c C-r" . ivy-resume)
	  ("M-x" . counsel-M-x)
	  ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
  #+END_SRC

* Avy
  Used for quick nav based on indexed highlighting
  #+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
  #+END_SRC
* Auto-Complete
  This package will not be used once I configure company
  #+BEGIN_SRC emacs-lisp
  ;(use-package auto-complete
  ;  :ensure t
  ;  :init
  ;  (progn
  ;    (ac-config-default)
  ;    (global-auto-complete-mode t)
  ;    ))
  #+END_SRC
* Undo-Tree
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
  #+END_SRC
* Misc Packages
  #+BEGIN_SRC emacs-lisp
    (use-package beacon
      :ensure t
      :config
      (beacon-mode 1))

    (use-package expand-region
      :ensure t
      :config
      (global-set-key (kbd "C-=") 'er/expand-region))

    (use-package iedit
      :ensure t)
  #+END_SRC
* Misc
  #+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist
	      `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
	  `((".*" ,temporary-file-directory t))) 
    (setq create-lockfiles nil)
  #+END_SRC
