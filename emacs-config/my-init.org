#+STARTUP: overview
* Sample init.el
  Below is a sample init.el that initializes emacs and loads this my-init.org file:

  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
  '("melpa" . "https://melpa.org/packages/"))

  (package-initialize)

  (unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

  (org-babel-load-file (expand-file-name "~/.emacs.d/my-init.org"))

* Init
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/customizations/")

    ;; This tls setting required if emcs version >= 26.3
    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")

    (setq save-interprogram-paste-before-kill t)

    (defun load-if-exists (f)
      "load the elisp file only if it exists and is readable"
      (when (file-readable-p f)
	  (load-file f)))

  #+END_SRC
* Interface Tweaks
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (tool-bar-mode -1)
    (fset 'yes-or-no-p 'y-or-n-p)
    (global-set-key (kbd "<f5>") 'revert-buffer)

    (use-package solarized-theme
      :ensure t
      :config (load-theme 'solarized-light t))

    (global-hl-line-mode t)

    (defun wgc/get-default-font ()
      (cond
       ((eq system-type 'windows-nt) "Consolas-13")
       ((eq system-type 'gnu/linux) "DejaVu Sans Mono-15")))

    (add-to-list 'default-frame-alist `(font . ,(wgc/get-default-font)))

    (when (display-graphic-p)
      (set-face-attribute 'fixed-pitch nil :family (wgc/get-default-font)))

  #+END_SRC

* Try
  Allows trying trying packages without installing them
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)
  #+END_SRC
* Which Key
  Provides help for commands
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))

  #+END_SRC
* ibuffer
  Use ibuffer for list-buffers
  #+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer)
  #+END_SRC
* Org Bulltets
  Adds formatting to .org files
  #+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1))))
  #+END_SRC
* Ace Window
  Adds numbers for selecting windows
  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :init
      (progn
	(global-set-key [remap other-window] 'ace-window)
	(custom-set-faces
	 '(aw-leading-char-face
	   ((t (:inherit ace-jump-face-foreground :height 3.0)))))
	))

    (defun wgc/swap-window ()
      "Swap windows and leave focus on original window"
      (interactive)
      (ace-swap-window)
      (aw-flip-window))
  #+END_SRC
* Swiper / Counsel / Ivy
  Used for searches
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :ensure t
      :bind (("M-y" . counsel-yank-pop)))

    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy))

    (use-package swiper
      :ensure t
      :bind(("C-s" . swiper)
	    ("C-r" . swiper)
	    ("C-c C-r" . ivy-resume)
	    ("M-x" . counsel-M-x)
	    ("C-x C-f" . counsel-find-file)
	    ("C-c k" . counsel-ag))
      :config
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history))

  #+END_SRC

* Avy
  Used for quick nav based on indexed highlighting
  #+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
  #+END_SRC
* Auto-Complete
  This package will not be used once I configure company
  #+BEGIN_SRC emacs-lisp
  ;(use-package auto-complete
  ;  :ensure t
  ;  :init
  ;  (progn
  ;    (ac-config-default)
  ;    (global-auto-complete-mode t)
  ;    ))
  #+END_SRC
* Undo-Tree
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
  #+END_SRC
* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :bind-keymap
      ("C-c p" . projectile-command-map)
      ("s-p" . projectile-command-map)
      :config
      (projectile-mode 1))

    (use-package counsel-projectile
      :ensure t
      :config
      (counsel-projectile-mode t))

  #+END_SRC
* Flycheck
  #+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))

  #+END_SRC
* Company
  For auto completion
  #+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (global-company-mode))
  #+END_SRC
* Misc Packages
  #+BEGIN_SRC emacs-lisp
    (use-package beacon
      :ensure t
      :config
      (beacon-mode 1))

    (use-package expand-region
      :ensure t
      :config
      (global-set-key (kbd "C-=") 'er/expand-region))

    (use-package iedit
      :ensure t)
  #+END_SRC
* Modes
** Web Mode
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :ensure t
       :config
       (add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))

       (setq web-mode-markup-indent-offset 2)
       (setq web-mode-css-indent-offset 2)
       (setq web-mode-code-indent-offset 2)
       (setq web-mode-enable-auto-closing t)
       (setq web-mode-enable-auto-quoting t))
   #+END_SRC
** Javascript
   #+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
  (setq js-mode-hook
	'(lambda () (progn
		      (set-variable 'indent-tabs-mode nil))))
   #+END_SRC
** CSS
   #+BEGIN_SRC emacs-lisp
  (setq css-indent-offset 2)

   #+END_SRC
** Haskell
   #+BEGIN_SRC emacs-lisp
     ;;(use-package lsp-mode
     ;;  :ensure t
     ;;  :hook (haskell-mode . lsp)
     ;;  :commands lsp
     ;;  :config
     ;;  (setq lsp-ui-doc-enable nil)
     ;;  (setq lsp-document-sync-method 'full))
     ;;
     ;;(use-package lsp-ui
     ;;  :ensure t
     ;;  :hook (haskell-mode . flycheck-mode)
     ;;  :commands lsp-ui-mode)
     ;;
     ;;(use-package lsp-haskell
     ;; :ensure t
     ;; :config
     ;; (setq lsp-haskell-process-path-hie "hie-wrapper")
     ;; (setq lsp-haskell-process-args-hie '())
     ;; ;; Comment/uncomment this line to see interactions between lsp client/server.
     ;; ;; (setq lsp-log-io t)
     ;;)
     (use-package haskell-mode
       :ensure t
       :bind
       (:map haskell-mode-map
	     ("C-c C-c" . haskell-compile))
       (:map haskell-cabal-mode-map
	     ("C-c C-c" . haskell-compile))
       :hook
       (haskell-mode . (lambda ()
		      (set (make-local-variable 'company-backends)
			   (append '((company-capf company-dabbrev-code))
				   company-backends))))
       (haskell-mode . interactive-haskell-mode)
       :config
       (setq haskell-tags-on-save t)
       (setq haskell-stylish-on-save t)
       (setq haskell-compile-cabal-build-command "stack build"))
   #+END_SRC
* Load Other Files
  #+BEGIN_SRC emacs-lisp
    (load-if-exists "~/configs/emacs-config/my-private.el")
  #+END_SRC
* Misc
  #+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist
	      `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
	  `((".*" ,temporary-file-directory t))) 

    (setq create-lockfiles nil)
    (setq tags-revert-without-query t)

    (define-prefix-command 'wgc-map)
    (global-set-key (kbd "C-1") 'wgc-map)
    (define-key wgc-map (kbd "s") 'wgc/swap-window)
  #+END_SRC
